#!/usr/bin/perl

use strict;
use warnings;
use YAML::Tiny;
use Getopt::Long qw(:config posix_default);
use Carp qw(croak);
use List::Util qw(first);
use FindBin '$Bin';
use lib "$Bin/../lib";
use Text::Glob::Expand;
use Cluster::Facts qw(expand_attr_sets expand_node_groups);

######################################################################

sub format_attrs {
    my ($format, $name, $attrs) = @_;

    my @attr_names;
    $format =~ 
        s{
              %
              (?:
                  %                 # an escaped percent
              |
                  (0)               # %0 stands for the attr set name
              |
                  ( [^\W\d][\w-]* ) # non-digit word char followed by word chars
              |
                  \{ ( [^\}]+ ) \}  # anything except braces
              )
         }
         {
             if (defined $1) {
                 $name;
             }
             elsif (my $name = $2 || $3) {
                 my $val = $attrs->{$name};
                 croak "no such attribute '$name'"
                     unless defined $val;
                 $val;
             }
             else {
                 '%'; # unescape escaped percents
             }
         }gex;

    return $format;
}

######################################################################


my $config_path = first { -f } 
    "$Bin/.node-expand.conf", 
    "$ENV{USER}/.node-expand.conf",
    "/etc/node-expand.conf";



my $attrs_serialiser = \&Cluster::Facts::serialize;


GetOptions(
    '--config=s' => \$config_path,
    '--format=s' => sub {
        my (undef, $format) = @_;
        # use format_attrs instead of serialise_attrs
        $attrs_serialiser = sub {
            format_attrs $format, @_;
        };
    }
)
    or die "failed to parse options.  stopping.\n";


my $yaml_stream;
if (defined $config_path) {
    if ($config_path eq '-') {
        $config_path = 'standard input';
        $yaml_stream = \*STDIN;
    }
    elsif (!-f $config_path) {
        die "No such file '$config_path'. stopping.\n";
    }
    else {
        require IO::File;
        $yaml_stream = IO::File->new($config_path)
            or die "failed to open $config_path: $!";
    }
}
else {
    die "no config file found and none specified with --config.  stopping.\n";
}

my $yaml = do { local $/; <$yaml_stream> };
undef $yaml_stream; # This will close the stream if we opened it

my $config;
{
    eval {
        ($config) = YAML::Tiny::Load($yaml);

        # If we gete here, nothing threw an exception.  But if $config
        # is not set, then this indicates an error, too.  However, we
        # want to be able to distinguish these from croaks from
        # YAML::Tiny and format them appropriately with information
        # from $@ (if an exception) or YAML::Tiny->errstr (otherwise).
        # (Yes, this is a PITA.  Why can't YAML::Tiny use one
        # mechanism or the other?)
        1;
    }
    or do {
        my $err = ($@ || '');
        ($err) = $err =~ /([^\n]+) at .*?$/m;
        die "failed to parse config from $config_path: $err\n"
    };
    
    # Handle the other sorts of error
    die "failed to parse config file from $config_path: ", YAML::Tiny->errstr, "\n"
        unless $config;
}

my ($attributes, $groups) = @$config{qw(attributes groups)};


expand_attr_sets($attributes);


my @nodes = expand_node_groups($attributes, $groups, @ARGV);

while(my ($name, $attrs) = splice @nodes, 0, 2) {
    print $attrs_serialiser->($name, $attrs);
    print "\n";
}

# 
# node-expand yum2 -f "%name%password@%host:%port"
