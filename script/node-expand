#!/usr/bin/perl

use strict;
use warnings;
use YAML::Tiny;
use Getopt::Long qw(:config posix_default);
use Carp qw(croak);
use FindBin '$Bin';
use lib "$Bin/../lib";
use Text::Glob::Expand;
use Cluster::Facts qw(expand_attr_sets expand_node_groups);

######################################################################

sub format_node {
    my ($format, $name, $attrs) = @_;

    my @attr_names;
    $format =~ 
        s{
              %
              (?:
                  %                 # an escaped percent
              |
                  (0)               # %0 stands for the attr set name
              |
                  ( [^\W\d][\w-]* ) # non-digit word char followed by word chars
              |
                  \{ ( [^\}]+ ) \}  # anything except braces
              )
         }
         {
             if (defined $1) {
                 $name;
             }
             elsif (my $name = $2 || $3) {
                 my $val = $attrs->{$name};
                 croak "no such attribute '$name'"
                     unless defined $val;
                 $val;
             }
             else {
                 '%'; # unescape escaped percents
             }
         }gex;

    return $format;
}

######################################################################

my $defs_file;
my $node_format = "%login:%password@%0:%%";
GetOptions(
    '--defs=s' => \$defs_file,
    '--format=s' => \$node_format,
)
    or die "failed to parse options.  stopping.\n";


my $yaml_stream = \*STDIN;


if (defined $defs_file) {
    die "No such file '$defs_file'. stopping.\n"
        unless -f $defs_file;
    require IO::File;
    $yaml_stream = IO::File->new($defs_file)
        or die "failed to open $defs_file: $!";
}
   

my $yaml = do { local $/; <$yaml_stream> };
my ($config) = YAML::Tiny::Load($yaml)
    or die "failed to parse config: ", YAML::Tiny->errstr, "\n";


my ($attributes, $groups) = @$config{qw(attributes groups)};

use Data::Dumper;
#print Dumper $config;
#print Dumper 
expand_attr_sets($attributes);


my @nodes = expand_node_groups($attributes, $groups, @ARGV);

#print Dumper {@nodes};


while(my ($name, $attrs) = splice @nodes, 0, 2) {
    print format_node $node_format, $name, $attrs;
    print "\n";
}

# 
# node-expand yum2 -f "%name%password@%host:%port"
